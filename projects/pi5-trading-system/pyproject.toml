[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "pi5-trading-system"
version = "1.0.0"
description = "Professional algorithmic trading system optimized for Raspberry Pi 5"
authors = ["Pi5 Trading System <trading@pi5system.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/BikeshR/menorepo/tree/main/projects/pi5-trading-system"
repository = "https://github.com/BikeshR/menorepo"
documentation = "https://github.com/BikeshR/menorepo/tree/main/projects/pi5-trading-system/docs"
keywords = ["trading", "algorithmic", "raspberry-pi", "finance", "backtesting"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Scientific/Engineering :: Information Analysis",
]

[tool.poetry.dependencies]
python = "^3.11"

# Async and Core
asyncio-mqtt = "^0.16.1"
asyncpg = "^0.29.0"
aioredis = "^2.0.1"
aiofiles = "^23.2.1"

# Web Framework
fastapi = "^0.104.1"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
websockets = "^10.4"
python-multipart = "^0.0.6"

# Database
psycopg2-binary = "^2.9.9"
alembic = "^1.13.0"
sqlalchemy = {extras = ["asyncio"], version = "^2.0.23"}

# Data Processing
pandas = "^2.1.4"
numpy = "^1.25.2"
scipy = "^1.11.4"
scikit-learn = "^1.3.2"
# ta-lib = "^0.4.28"  # Commented out for initial deployment - complex ARM64 build

# Market Data
yfinance = "^0.2.18"
alpha-vantage = "^2.3.1"
ccxt = "^4.1.64"
requests = "^2.31.0"
websocket-client = "^1.6.4"

# Trading
alpaca-trade-api = "^3.1.1"

# Configuration and Validation
pydantic = {extras = ["email"], version = "^2.5.0"}
pydantic-settings = "^2.1.0"
PyYAML = "^6.0.1"
python-dotenv = "^1.0.0"

# Utilities
click = "^8.1.7"
rich = "^13.7.0"
structlog = "^23.2.0"
python-json-logger = "^2.0.7"
schedule = "^1.2.0"

# Development and Testing
pytest = {version = "^7.4.3", optional = true}
pytest-asyncio = {version = "^0.21.1", optional = true}
pytest-cov = {version = "^4.1.0", optional = true}
pytest-mock = {version = "^3.12.0", optional = true}
black = {version = "^23.11.0", optional = true}
isort = {version = "^5.12.0", optional = true}
mypy = {version = "^1.7.1", optional = true}
flake8 = {version = "^6.1.0", optional = true}
pre-commit = {version = "^3.6.0", optional = true}

[tool.poetry.extras]
dev = ["pytest", "pytest-asyncio", "pytest-cov", "pytest-mock", "black", "isort", "mypy", "flake8", "pre-commit"]

[tool.poetry.scripts]
pi5-trading = "trading_api.main:main"
pi5-backtest = "trading_api.cli.backtest:main"
pi5-config = "trading_api.cli.config:main"

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["trading_api"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "unit: marks tests as unit tests (deselect with '-m \"not unit\"')",
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "system: marks tests as system tests (deselect with '-m \"not system\"')",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]

[tool.coverage.run]
source = ["trading_api"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]