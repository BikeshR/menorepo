"""
Event type definitions for Pi5 Trading System.

Defines all system events with their schemas, validation, and serialization.
Events are the primary communication mechanism in the event-driven architecture.

Event Categories:
- Market Data Events: Real-time quotes, OHLCV updates, market status
- Strategy Events: Signal generation, strategy state changes  
- Order Events: Order creation, fills, cancellations
- Portfolio Events: Position changes, P&L updates
- Risk Events: Risk violations, limit breaches
- System Events: Startup, shutdown, errors, health checks
"""

import uuid
from dataclasses import dataclass, field
from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from core.interfaces import BaseEvent, TradingSignal


# ============================================================================
# MARKET DATA EVENTS
# ============================================================================

@dataclass
class MarketDataEvent(BaseEvent):
    """Real-time market data update event."""
    
    symbol: str
    timestamp: datetime
    open_price: float
    high_price: float
    low_price: float
    close_price: float
    volume: int
    interval_type: str = "1min"
    source: str = "unknown"
    vwap: Optional[float] = None
    trade_count: Optional[int] = None
    
    def _event_data(self) -> Dict[str, Any]:
        """Return market data specific fields."""
        return {
            'symbol': self.symbol,
            'timestamp': self.timestamp.isoformat(),
            'open_price': self.open_price,
            'high_price': self.high_price,
            'low_price': self.low_price,
            'close_price': self.close_price,
            'volume': self.volume,
            'interval_type': self.interval_type,
            'source': self.source,
            'vwap': self.vwap,
            'trade_count': self.trade_count,
        }


@dataclass  
class QuoteEvent(BaseEvent):
    """Real-time quote (bid/ask) update event."""
    
    symbol: str
    timestamp: datetime
    bid_price: Optional[float] = None
    ask_price: Optional[float] = None
    bid_size: Optional[int] = None
    ask_size: Optional[int] = None
    last_price: Optional[float] = None
    last_size: Optional[int] = None
    source: str = "unknown"
    
    def _event_data(self) -> Dict[str, Any]:
        """Return quote specific fields."""
        return {
            'symbol': self.symbol,
            'timestamp': self.timestamp.isoformat(),
            'bid_price': self.bid_price,
            'ask_price': self.ask_price,
            'bid_size': self.bid_size,
            'ask_size': self.ask_size,
            'last_price': self.last_price,
            'last_size': self.last_size,
            'source': self.source,
        }


@dataclass
class MarketStatusEvent(BaseEvent):
    """Market status change event."""
    
    market: str
    status: str  # open, closed, pre_market, after_hours
    timestamp: datetime
    message: Optional[str] = None
    
    def _event_data(self) -> Dict[str, Any]:
        """Return market status specific fields."""
        return {
            'market': self.market,
            'status': self.status,
            'timestamp': self.timestamp.isoformat(),
            'message': self.message,
        }


# ============================================================================
# STRATEGY EVENTS  
# ============================================================================

@dataclass
class SignalGeneratedEvent(BaseEvent):
    """Trading signal generated by strategy."""
    
    strategy_name: str
    symbol: str
    signal_type: TradingSignal
    confidence: float
    price: float
    timestamp: datetime
    metadata: Dict[str, Any] = field(default_factory=dict)
    
    def _event_data(self) -> Dict[str, Any]:
        """Return signal specific fields."""
        return {
            'strategy_name': self.strategy_name,
            'symbol': self.symbol,
            'signal_type': self.signal_type.value,
            'confidence': self.confidence,
            'price': self.price,
            'timestamp': self.timestamp.isoformat(),
            'metadata': self.metadata,
        }


@dataclass
class StrategyStatusEvent(BaseEvent):
    """Strategy status change event."""
    
    strategy_name: str
    old_status: str
    new_status: str  # active, inactive, error, initializing
    timestamp: datetime
    reason: Optional[str] = None
    error_details: Optional[str] = None
    
    def _event_data(self) -> Dict[str, Any]:
        """Return strategy status specific fields."""
        return {
            'strategy_name': self.strategy_name,
            'old_status': self.old_status,
            'new_status': self.new_status,
            'timestamp': self.timestamp.isoformat(),
            'reason': self.reason,
            'error_details': self.error_details,
        }


@dataclass
class StrategyPerformanceEvent(BaseEvent):
    """Strategy performance metrics update."""
    
    strategy_name: str
    timestamp: datetime
    total_return: float
    daily_return: float
    sharpe_ratio: Optional[float] = None
    max_drawdown: Optional[float] = None
    win_rate: Optional[float] = None
    total_trades: int = 0
    
    def _event_data(self) -> Dict[str, Any]:
        """Return performance specific fields."""
        return {
            'strategy_name': self.strategy_name,
            'timestamp': self.timestamp.isoformat(),
            'total_return': self.total_return,
            'daily_return': self.daily_return,
            'sharpe_ratio': self.sharpe_ratio,
            'max_drawdown': self.max_drawdown,
            'win_rate': self.win_rate,
            'total_trades': self.total_trades,
        }


# ============================================================================
# ORDER EVENTS
# ============================================================================

@dataclass
class OrderCreatedEvent(BaseEvent):
    """Order creation event."""
    
    order_id: str
    symbol: str
    side: str  # buy, sell
    quantity: float
    order_type: str  # market, limit, stop, stop_limit
    price: Optional[float] = None
    stop_price: Optional[float] = None
    strategy_name: str = ""
    timestamp: datetime = field(default_factory=datetime.utcnow)
    
    def _event_data(self) -> Dict[str, Any]:
        """Return order creation specific fields."""
        return {
            'order_id': self.order_id,
            'symbol': self.symbol,
            'side': self.side,
            'quantity': self.quantity,
            'order_type': self.order_type,
            'price': self.price,
            'stop_price': self.stop_price,
            'strategy_name': self.strategy_name,
            'timestamp': self.timestamp.isoformat(),
        }


@dataclass
class OrderFilledEvent(BaseEvent):
    """Order fill event."""
    
    order_id: str
    symbol: str
    quantity: float
    price: float
    commission: float
    fill_id: str
    timestamp: datetime
    remaining_quantity: float = 0.0
    is_partial: bool = False
    
    def _event_data(self) -> Dict[str, Any]:
        """Return order fill specific fields."""
        return {
            'order_id': self.order_id,
            'symbol': self.symbol,
            'quantity': self.quantity,
            'price': self.price,
            'commission': self.commission,
            'fill_id': self.fill_id,
            'timestamp': self.timestamp.isoformat(),
            'remaining_quantity': self.remaining_quantity,
            'is_partial': self.is_partial,
        }


@dataclass
class OrderStatusEvent(BaseEvent):
    """Order status change event."""
    
    order_id: str
    old_status: str
    new_status: str  # pending, submitted, filled, cancelled, rejected
    timestamp: datetime
    reason: Optional[str] = None
    broker_message: Optional[str] = None
    
    def _event_data(self) -> Dict[str, Any]:
        """Return order status specific fields."""
        return {
            'order_id': self.order_id,
            'old_status': self.old_status,
            'new_status': self.new_status,
            'timestamp': self.timestamp.isoformat(),
            'reason': self.reason,
            'broker_message': self.broker_message,
        }


# ============================================================================
# PORTFOLIO EVENTS
# ============================================================================

@dataclass
class PositionChangedEvent(BaseEvent):
    """Position change event."""
    
    symbol: str
    old_quantity: float
    new_quantity: float
    price: float
    timestamp: datetime
    change_reason: str  # trade, adjustment, split, etc.
    
    def _event_data(self) -> Dict[str, Any]:
        """Return position change specific fields."""
        return {
            'symbol': self.symbol,
            'old_quantity': self.old_quantity,
            'new_quantity': self.new_quantity,
            'price': self.price,
            'timestamp': self.timestamp.isoformat(),
            'change_reason': self.change_reason,
        }


@dataclass
class PortfolioValueEvent(BaseEvent):
    """Portfolio value update event."""
    
    total_value: float
    cash: float
    positions_value: float
    unrealized_pnl: float
    realized_pnl: float
    timestamp: datetime
    daily_return: Optional[float] = None
    total_return: Optional[float] = None
    
    def __post_init__(self):
        """Initialize base event attributes."""
        super().__init__()
    
    def _event_data(self) -> Dict[str, Any]:
        """Return portfolio value specific fields."""
        return {
            'total_value': self.total_value,
            'cash': self.cash,
            'positions_value': self.positions_value,
            'unrealized_pnl': self.unrealized_pnl,
            'realized_pnl': self.realized_pnl,
            'timestamp': self.timestamp.isoformat(),
            'daily_return': self.daily_return,
            'total_return': self.total_return,
        }


# ============================================================================
# RISK EVENTS
# ============================================================================

@dataclass
class RiskViolationEvent(BaseEvent):
    """Risk limit violation event."""
    
    violation_type: str  # position_size, exposure, drawdown, etc.
    current_value: float
    limit_value: float
    severity: str  # warning, critical
    symbol: Optional[str] = None
    strategy_name: Optional[str] = None
    timestamp: datetime = field(default_factory=datetime.utcnow)
    
    def _event_data(self) -> Dict[str, Any]:
        """Return risk violation specific fields."""
        return {
            'violation_type': self.violation_type,
            'current_value': self.current_value,
            'limit_value': self.limit_value,
            'severity': self.severity,
            'symbol': self.symbol,
            'strategy_name': self.strategy_name,
            'timestamp': self.timestamp.isoformat(),
        }


@dataclass
class RiskMetricsEvent(BaseEvent):
    """Risk metrics update event."""
    
    timestamp: datetime
    var_95: Optional[float] = None
    var_99: Optional[float] = None
    expected_shortfall: Optional[float] = None
    beta: Optional[float] = None
    volatility: Optional[float] = None
    max_drawdown: Optional[float] = None
    
    def _event_data(self) -> Dict[str, Any]:
        """Return risk metrics specific fields."""
        return {
            'timestamp': self.timestamp.isoformat(),
            'var_95': self.var_95,
            'var_99': self.var_99,
            'expected_shortfall': self.expected_shortfall,
            'beta': self.beta,
            'volatility': self.volatility,
            'max_drawdown': self.max_drawdown,
        }


# ============================================================================
# SYSTEM EVENTS
# ============================================================================

@dataclass
class SystemStartupEvent(BaseEvent):
    """System startup event."""
    
    component: str
    version: str
    timestamp: datetime = field(default_factory=datetime.utcnow)
    configuration: Dict[str, Any] = field(default_factory=dict)
    
    def _event_data(self) -> Dict[str, Any]:
        """Return startup specific fields."""
        return {
            'component': self.component,
            'version': self.version,
            'timestamp': self.timestamp.isoformat(),
            'configuration': self.configuration,
        }


@dataclass
class SystemShutdownEvent(BaseEvent):
    """System shutdown event."""
    
    component: str
    timestamp: datetime = field(default_factory=datetime.utcnow)
    reason: str = "normal"
    error_details: Optional[str] = None
    
    def _event_data(self) -> Dict[str, Any]:
        """Return shutdown specific fields."""
        return {
            'component': self.component,
            'timestamp': self.timestamp.isoformat(),
            'reason': self.reason,
            'error_details': self.error_details,
        }


@dataclass
class SystemErrorEvent(BaseEvent):
    """System error event."""
    
    component: str
    error_type: str
    error_message: str
    timestamp: datetime = field(default_factory=datetime.utcnow)
    error_details: Optional[str] = None
    stack_trace: Optional[str] = None
    context: Dict[str, Any] = field(default_factory=dict)
    
    def _event_data(self) -> Dict[str, Any]:
        """Return error specific fields."""
        return {
            'component': self.component,
            'error_type': self.error_type,
            'error_message': self.error_message,
            'timestamp': self.timestamp.isoformat(),
            'error_details': self.error_details,
            'stack_trace': self.stack_trace,
            'context': self.context,
        }


@dataclass
class HealthCheckEvent(BaseEvent):
    """System health check event."""
    
    component: str
    status: str  # healthy, degraded, unhealthy
    timestamp: datetime = field(default_factory=datetime.utcnow)
    checks: Dict[str, Any] = field(default_factory=dict)
    response_time_ms: Optional[float] = None
    
    def _event_data(self) -> Dict[str, Any]:
        """Return health check specific fields."""
        return {
            'component': self.component,
            'status': self.status,
            'timestamp': self.timestamp.isoformat(),
            'checks': self.checks,
            'response_time_ms': self.response_time_ms,
        }


# ============================================================================
# EVENT TYPE REGISTRY
# ============================================================================

EVENT_TYPES = {
    # Market Data
    'market_data': MarketDataEvent,
    'quote': QuoteEvent,
    'market_status': MarketStatusEvent,
    
    # Strategy
    'signal_generated': SignalGeneratedEvent,
    'strategy_status': StrategyStatusEvent,
    'strategy_performance': StrategyPerformanceEvent,
    
    # Orders
    'order_created': OrderCreatedEvent,
    'order_filled': OrderFilledEvent,
    'order_status': OrderStatusEvent,
    
    # Portfolio
    'position_changed': PositionChangedEvent,
    'portfolio_value': PortfolioValueEvent,
    
    # Risk
    'risk_violation': RiskViolationEvent,
    'risk_metrics': RiskMetricsEvent,
    
    # System
    'system_startup': SystemStartupEvent,
    'system_shutdown': SystemShutdownEvent,
    'system_error': SystemErrorEvent,
    'health_check': HealthCheckEvent,
}


def create_event(event_type: str, **kwargs) -> BaseEvent:
    """
    Create event instance from event type string.
    
    Args:
        event_type: Event type identifier
        **kwargs: Event specific parameters
        
    Returns:
        Event instance
        
    Raises:
        ValueError: If event type is not recognized
    """
    if event_type not in EVENT_TYPES:
        raise ValueError(f"Unknown event type: {event_type}")
    
    event_class = EVENT_TYPES[event_type]
    return event_class(**kwargs)


def get_event_type_name(event: BaseEvent) -> str:
    """
    Get event type name from event instance.
    
    Args:
        event: Event instance
        
    Returns:
        Event type string
    """
    for event_type, event_class in EVENT_TYPES.items():
        if isinstance(event, event_class):
            return event_type
    
    return 'unknown'