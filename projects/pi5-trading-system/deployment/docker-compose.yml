services:
  # TimescaleDB for time-series data
  timescaledb:
    image: timescale/timescaledb:latest-pg14
    container_name: pi5_trading_db
    environment:
      POSTGRES_DB: pi5_trading
      POSTGRES_USER: pi5trader
      POSTGRES_PASSWORD: ${DB_PASSWORD:-trading_secure_2025}
      POSTGRES_HOST_AUTH_METHOD: md5
    ports:
      - "5432:5432"
    volumes:
      - timescale_data:/var/lib/postgresql/data
      - ./init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pi5trader -d pi5_trading"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: pi5_trading_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Pi5 Trading API Application  
  trading_api:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    container_name: pi5_trading_api
    environment:
      # Database Configuration
      DB_HOST: timescaledb
      DB_PORT: 5432
      DB_NAME: pi5_trading
      DB_USER: pi5trader
      DB_PASSWORD: ${DB_PASSWORD:-trading_secure_2025}
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # Application Configuration
      ENVIRONMENT: production
      LOG_LEVEL: INFO
      SERVER_MODE: demo
      
      # Market Data (add your API keys)
      YAHOO_FINANCE_ENABLED: true
      ALPHA_VANTAGE_API_KEY: ${ALPHA_VANTAGE_API_KEY:-}
      
      # Trading Configuration
      INITIAL_CASH: 100000.0
      DEMO_MODE: true
      PAPER_TRADING: true
      
    depends_on:
      timescaledb:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8080:8080"  # Unified web interface (API + Dashboard)
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 60s
      timeout: 10s
      retries: 3

volumes:
  timescale_data:
  redis_data: