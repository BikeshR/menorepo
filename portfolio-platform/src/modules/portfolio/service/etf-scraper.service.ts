/**
 * justETF Scraper Service
 *
 * Scrapes ETF data from justETF.com for personal portfolio analysis.
 * Respects rate limiting and caches data for 30+ days.
 *
 * Usage: Personal use only, not for redistribution.
 */

// Removed cheerio dependency
// import * as cheerio from 'cheerio'
import type {
  ETFAssetAllocation,
  ETFBreakdownData,
  ETFCountryBreakdown,
  ETFHolding,
  ETFMetadata,
  ETFSectorBreakdown,
} from '../types'

// Rate limiting: Wait between requests
const RATE_LIMIT_MS = 2500 // 2.5 seconds between requests

let lastRequestTime = 0

async function rateLimit() {
  const now = Date.now()
  const timeSinceLastRequest = now - lastRequestTime
  if (timeSinceLastRequest < RATE_LIMIT_MS) {
    const waitTime = RATE_LIMIT_MS - timeSinceLastRequest
    await new Promise((resolve) => setTimeout(resolve, waitTime))
  }
  lastRequestTime = Date.now()
}

/**
 * Fetch HTML from justETF
 */
async function fetchJustETF(isin: string): Promise<string> {
  await rateLimit()

  const url = `https://www.justetf.com/en/etf-profile.html?isin=${isin}`

  try {
    const response = await fetch(url, {
      headers: {
        'User-Agent':
          'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        Accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'Accept-Language': 'en-GB,en;q=0.9',
      },
    })

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`)
    }

    return await response.text()
  } catch (error) {
    throw new Error(
      `Failed to fetch justETF data: ${error instanceof Error ? error.message : String(error)}`
    )
  }
}

/**
 * Parse ETF metadata from justETF page
 */
function parseMetadata(_html: string, _ticker: string, _isin: string): Partial<ETFMetadata> {
  throw new Error('cheerio dependency removed - scraping disabled')
  // const $ = cheerio.load(html)
  //
  // // Extract basic info
  // const name = $('h1.h2').first().text().trim() || ticker
  //
  // // Extract provider (e.g., "iShares", "Vanguard")
  // const provider =
  //   $('.val.infobox')
  //     .filter((_, el) => $(el).prev('.label').text().includes('Fund provider'))
  //     .text()
  //     .trim() || null
  //
  // // Extract TER (Total Expense Ratio)
  // const terText = $('.val.infobox')
  //   .filter((_, el) => $(el).prev('.label').text().includes('Total expense ratio'))
  //   .text()
  //   .trim()
  // const ter_pct = terText ? Number.parseFloat(terText.replace('%', '').replace(',', '.')) : null
  //
  // // Extract AUM (Assets Under Management)
  // const aumText = $('.val.infobox')
  //   .filter((_, el) => $(el).prev('.label').text().includes('Fund size'))
  //   .text()
  //   .trim()
  // let total_assets_usd: number | null = null
  // if (aumText) {
  //   // Parse values like "EUR 1,234m" or "USD 5.67bn"
  //   const match = aumText.match(/([\d,.]+)\s*(m|bn)/i)
  //   if (match) {
  //     const value = Number.parseFloat(match[1].replace(',', ''))
  //     const multiplier = match[2].toLowerCase() === 'bn' ? 1_000_000_000 : 1_000_000
  //     total_assets_usd = value * multiplier
  //   }
  // }
  //
  // return {
  //   ticker,
  //   isin,
  //   name,
  //   provider,
  //   ter_pct,
  //   total_assets_usd,
  //   data_source: 'justetf',
  //   last_scraped_at: new Date().toISOString(),
  //   scrape_status: 'success',
  //   scrape_error: null,
  // }
}

/**
 * Parse top holdings from justETF page
 */
function parseHoldings(_html: string, _etf_ticker: string): ETFHolding[] {
  throw new Error('cheerio dependency removed - scraping disabled')
  // const $ = cheerio.load(html)
  // const holdings: ETFHolding[] = []
  //
  // // Find holdings table
  // $('#top10-holdings table tbody tr').each((_, row) => {
  //   const cells = $(row).find('td')
  //   if (cells.length < 2) return
  //
  //   const holding_name = cells.eq(0).text().trim()
  //   const weightText = cells.eq(1).text().trim()
  //   const weight_pct = Number.parseFloat(weightText.replace('%', '').replace(',', '.'))
  //
  //   if (holding_name && !Number.isNaN(weight_pct)) {
  //     holdings.push({
  //       id: '', // Will be generated by DB
  //       etf_ticker,
  //       holding_ticker: null, // justETF might not provide ticker
  //       holding_name,
  //       holding_isin: null,
  //       weight_pct,
  //       shares: null,
  //       market_value_usd: null,
  //       asset_type: 'stock', // Assume stock unless we can determine otherwise
  //       country: null,
  //       sector: null,
  //       industry: null,
  //       last_updated_at: new Date().toISOString(),
  //       created_at: '',
  //       updated_at: '',
  //     })
  //   }
  // })
  //
  // return holdings
}

/**
 * Parse country breakdown from justETF page
 */
function parseCountryBreakdown(_html: string, _etf_ticker: string): ETFCountryBreakdown[] {
  throw new Error('cheerio dependency removed - scraping disabled')
}

/**
 * Parse sector breakdown from justETF page
 */
function parseSectorBreakdown(_html: string, _etf_ticker: string): ETFSectorBreakdown[] {
  throw new Error('cheerio dependency removed - scraping disabled')
}

/**
 * Parse asset allocation (stocks vs bonds vs cash)
 */
function parseAssetAllocation(_html: string, _etf_ticker: string): ETFAssetAllocation[] {
  throw new Error('cheerio dependency removed - scraping disabled')
}

/**
 * Main scraper function: Fetch and parse all ETF data
 */
export async function scrapeETFData(ticker: string, isin: string): Promise<ETFBreakdownData> {
  try {
    console.log(`[ETF Scraper] Fetching data for ${ticker} (${isin})...`)

    const html = await fetchJustETF(isin)

    const metadata = parseMetadata(html, ticker, isin) as ETFMetadata
    const holdings = parseHoldings(html, ticker)
    const countryBreakdown = parseCountryBreakdown(html, ticker)
    const sectorBreakdown = parseSectorBreakdown(html, ticker)
    const assetAllocation = parseAssetAllocation(html, ticker)

    console.log(`[ETF Scraper] Successfully scraped ${ticker}:`, {
      holdings: holdings.length,
      countries: countryBreakdown.length,
      sectors: sectorBreakdown.length,
      assetClasses: assetAllocation.length,
    })

    return {
      metadata,
      holdings,
      countryBreakdown,
      sectorBreakdown,
      assetAllocation,
    }
  } catch (error) {
    console.error(`[ETF Scraper] Failed to scrape ${ticker}:`, error)
    throw error
  }
}

/**
 * Check if ETF data is stale (older than 30 days)
 */
export function isDataStale(lastScrapedAt: string | null): boolean {
  if (!lastScrapedAt) return true

  const lastScraped = new Date(lastScrapedAt)
  const now = new Date()
  const daysSince = (now.getTime() - lastScraped.getTime()) / (1000 * 60 * 60 * 24)

  return daysSince > 30
}
