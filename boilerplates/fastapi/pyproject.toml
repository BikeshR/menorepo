[project]
name = "fastapi-boilerplate"
version = "0.1.0"
description = "Modern FastAPI boilerplate with 2025 best practices"
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
requires-python = ">=3.12"
readme = "README.md"
license = {text = "MIT"}

dependencies = [
    # FastAPI and ASGI server
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.32.0",

    # Pydantic v2 for data validation
    "pydantic>=2.9.0",
    "pydantic-settings>=2.6.0",
    "email-validator>=2.2.0",

    # Database - SQLAlchemy 2.0 with async support
    "sqlalchemy[asyncio]>=2.0.35",
    "alembic>=1.13.3",
    "asyncpg>=0.29.0",  # PostgreSQL async driver
    "greenlet>=3.1.1",  # Required for SQLAlchemy async

    # Authentication & Security
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.12",
    "bcrypt>=4.2.0",

    # HTTP client
    "httpx>=0.27.2",

    # Redis for caching (optional)
    "redis>=5.2.0",

    # Environment and configuration
    "python-dotenv>=1.0.1",

    # Logging and monitoring
    "structlog>=24.4.0",

    # Utilities
    "python-slugify>=8.0.4",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.3.3",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "httpx>=0.27.2",  # For TestClient

    # Code quality
    "ruff>=0.7.0",
    "mypy>=1.13.0",
    "pre-commit>=4.0.1",

    # Type stubs
    "types-passlib>=1.7.7",
    "types-python-jose>=3.3.4",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/app"]

# Ruff configuration
[tool.ruff]
target-version = "py312"
line-length = 100
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG",    # flake8-unused-arguments
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "PTH",    # flake8-use-pathlib
    "RUF",    # Ruff-specific rules
]
ignore = [
    "E501",   # line too long, handled by formatter
    "B008",   # do not perform function calls in argument defaults
    "UP007",  # Use X | Y for type annotations (Optional is fine)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Unused imports in __init__.py
"tests/**/*.py" = ["ARG", "S101"]  # Allow unused args and asserts in tests

[tool.ruff.lint.isort]
known-first-party = ["app"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

# Mypy configuration
[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false
disallow_untyped_calls = false

# Pytest configuration
[tool.pytest.ini_options]
minversion = "8.0"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src/app",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/alembic/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
