name: Deploy Supabase

on:
  push:
    branches:
      - main
    paths:
      - 'portfolio-platform/supabase/**'
      - '.github/workflows/deploy-supabase.yml'
  workflow_dispatch:

jobs:
  # Check which files changed to determine what to deploy
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      migrations: ${{ steps.filter.outputs.migrations }}
      functions: ${{ steps.filter.outputs.functions }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check changed files
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            migrations:
              - 'portfolio-platform/supabase/migrations/**'
            functions:
              - 'portfolio-platform/supabase/functions/**'

  # Always deploy migrations (they're quick and should always be in sync)
  deploy-migrations:
    name: Deploy Database Migrations
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.migrations == 'true' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Link Supabase Project
        run: |
          cd portfolio-platform
          supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Push Database Migrations
        run: |
          cd portfolio-platform
          supabase db push
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}

  # Only deploy functions if functions changed or manual trigger
  deploy-functions:
    name: Deploy Edge Functions
    runs-on: ubuntu-latest
    needs: [detect-changes, deploy-migrations]
    if: |
      always() &&
      (needs.detect-changes.outputs.functions == 'true' || github.event_name == 'workflow_dispatch') &&
      (needs.deploy-migrations.result == 'success' || needs.deploy-migrations.result == 'skipped')

    strategy:
      matrix:
        function:
          - daily-portfolio-sync
          - calculate-metrics
          - update-benchmark-data
          - ai-portfolio-insights
          - check-price-alerts
          - check-milestones
          - detect-anomalies

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Deploy Edge Function - ${{ matrix.function }}
        run: |
          cd portfolio-platform
          supabase functions deploy ${{ matrix.function }} \
            --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Set Function Secrets
        run: |
          cd portfolio-platform
          # Set environment variables for the function
          supabase secrets set \
            --project-ref ${{ secrets.SUPABASE_PROJECT_REF }} \
            TRADING212_API_KEY=${{ secrets.TRADING212_API_KEY }} \
            KRAKEN_API_KEY=${{ secrets.KRAKEN_API_KEY }} \
            KRAKEN_API_SECRET=${{ secrets.KRAKEN_API_SECRET }} \
            ALPHAVANTAGE_API_KEY=${{ secrets.ALPHAVANTAGE_API_KEY }} \
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        continue-on-error: true

  # Verify deployment
  verify-deployment:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: [detect-changes, deploy-functions]
    if: |
      always() &&
      needs.deploy-functions.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: List Deployed Functions
        run: |
          cd portfolio-platform
          supabase functions list \
            --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Test Health Check
        run: |
          curl -f -X POST \
            "${{ secrets.SUPABASE_URL }}/functions/v1/daily-portfolio-sync" \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_ANON_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{"test": true}' || echo "Health check endpoint not ready yet"
        continue-on-error: true
